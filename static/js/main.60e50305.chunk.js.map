{"version":3,"sources":["ojo.gltf","MyModel.js","CustomBlender.js","index.js"],"names":["Model","props","group","useRef","useGLTF","ojo","nodes","materials","animations","useAnimations","actions","ref","dispose","name","position","rotation","scale","castShadow","receiveShadow","geometry","Sphere_1","material","Sphere_2","Sphere_3","Sphere_4","preload","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useFrame","current","update","args","autoRotate","enableZoom","SkyBox","scene","texture","CubeTextureLoader","load","background","CustomBlender","useState","Environment","files","path","Text","color","fontSize","maxWidth","textAlign","font","fillOpacity","strokeWidth","strokeColor","anchorX","anchorY","intensity","rootElement","document","getElementById","ReactDOM","render","StrictMode","fallback"],"mappings":"8RAAe,MAA0B,iC,QCQ1B,SAASA,EAAMC,GAC5B,IAAMC,EAAQC,mBACZ,EAAyCC,YAAQC,GAAzCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,WACRC,YAAcD,EAAYN,GAAtCQ,QACR,OACE,gDAAOC,IAAKT,GAAWD,GAAvB,IAA8BW,QAAS,KAAvC,UACE,uBACEC,KAAK,QACLC,SAAU,CAAC,EAAG,MAAO,KACrBC,SAAU,CAAC,KAAM,GAAK,MACtBC,MAAO,CAAC,EAAG,EAAG,KAEhB,wBAAOF,SAAU,CAAC,EAAG,EAAG,GAAIC,SAAU,EAAE,KAAM,KAAO,MAAOC,MAAO,CAAC,IAAM,IAAM,KAAhF,UACE,sBACEC,YAAU,EACVC,eAAa,EACbC,SAAUb,EAAMc,SAASD,SACzBE,SAAUd,EAAU,kBAEtB,sBACEU,YAAU,EACVC,eAAa,EACbC,SAAUb,EAAMgB,SAASH,SACzBE,SAAUd,EAAU,kBAEtB,sBACEU,YAAU,EACVC,eAAa,EACbC,SAAUb,EAAMiB,SAASJ,SACzBE,SAAUd,EAAU,kBAEtB,sBACEU,YAAU,EACVC,eAAa,EACbC,SAAUb,EAAMkB,SAASL,SACzBE,SAAUd,EAAU,yBAO9BH,IAAQqB,QAAQ,sBC7BhBC,YAAO,CAAEC,oBAGT,IAAMC,EAAiB,WAKrB,MAGIC,cAFFC,EADF,EACEA,OACMC,EAFR,EAEEC,GAAMD,WAIFE,EAAW9B,mBAEjB,OADA+B,aAAS,kBAAMD,EAASE,QAAQC,YAE9B,+BACEzB,IAAKsB,EACLI,KAAM,CAACP,EAAQC,GACfO,YAAY,EACZC,YAAY,KAMlB,SAASC,IACP,IAAQC,EAAUZ,cAAVY,MAGFC,GAFS,IAAIC,qBAEIC,KAAK,CAW1B,iBACA,YACA,iBACA,aACA,YACA,mBAKF,OADAH,EAAMI,WAAaH,EACZ,KAwEMI,MA5Bf,WACE,MAA4BC,oBAAS,GAArC,mBAEA,OAFA,UAGE,eAAC,IAAD,WACE,cAAC,EAAD,IACE,cAACC,EAAA,EAAD,CAAaC,MAAO,CAAC,gBAAgB,gBAAgB,gBAAgB,WAAW,WAAW,YAAaC,KAAK,KAAKL,YAAY,IAChI,cAACL,EAAD,IACA,cAACW,EAAA,EAAD,CACEC,MAAO,UACPC,SAAU,EACVC,SAAU,EACVC,UAAW,OACXC,KAAK,uEACLC,YAAa,EACbC,YAAa,OACbC,YAAY,OACZC,QAAQ,QACRC,QAAQ,QAVV,4BAaA,kCAAkB/C,SAAU,CAAC,GAAI,GAAI,GAAIgD,UAAW,IACpD,4BAAYhD,SAAU,CAAC,GAAI,GAAI,GAAIgD,UAAW,IAC9C,cAAC,EAAD,QCtIAC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UAIE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAAC,EAAD,QAGJN,K","file":"static/js/main.60e50305.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ojo.788d8ad0.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport ojo from './ojo.gltf'\n\nexport default function Model(props) {\n  const group = useRef()\n    const { nodes, materials, animations } = useGLTF(ojo)\n  const { actions } = useAnimations(animations, group)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group\n        name=\"Empty\"\n        position={[1, 5.31, -0.06]}\n        rotation={[1.44, 0.2, 1.63]}\n        scale={[1, 1, 1]}\n      />\n      <group position={[0, 0, 0]} rotation={[-1.56, 0.02, -1.56]} scale={[0.91, 0.91, 0.91]}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Sphere_1.geometry}\n          material={materials['Material.002']}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Sphere_2.geometry}\n          material={materials['Material.003']}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Sphere_3.geometry}\n          material={materials['Material.004']}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Sphere_4.geometry}\n          material={materials['Material.001']}\n        />\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/ojo_broken_a.gltf')\n\n","import React, { useRef, useState, Suspense } from \"react\";\nimport { Canvas, extend, useThree, useFrame, useLoader} from \"@react-three/fiber\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport {\n  CubeTextureLoader,\n  CubeCamera,\n  WebGLCubeRenderTarget,\n  RGBFormat,\n  LinearMipmapLinearFilter\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./App.css\";\nimport {Text, Environment} from '@react-three/drei';\nimport {\n  EffectComposer,\n  DepthOfField,\n  Bloom,\n  Noise,\n  Vignette\n} from \"@react-three/postprocessing\";\nimport MyModel from './MyModel.js';\nextend({ OrbitControls });\n//const MyModel = React.lazy(() => import('./MyModel.js'));\n\nconst CameraControls = () => {\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n\n  const {\n    camera,\n    gl: { domElement }\n  } = useThree();\n\n  // Ref to the controls, so that we can update them on every frame using useFrame\n  const controls = useRef();\n  useFrame(() => controls.current.update());\n  return (\n    <orbitControls\n      ref={controls}\n      args={[camera, domElement]}\n      autoRotate={false}\n      enableZoom={true}\n    />\n  );\n};\n\n// Loads the skybox texture and applies it to the scene.\nfunction SkyBox() {\n  const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    /*\n    \"/test.png\",\n\n    \"/psicodelico.jpg\" ,\n    \"/psicodelico.jpg\" ,\n    \"/psicodelico.jpg\" ,\n    \"/psicodelico.jpg\" ,\n    \"/psicodelico.jpg\" ,\n    \"/psicodelico.jpg\" */\n\n    \"/gradiente.jpg\",\n    \"/test.png\",\n    \"/hojarezca.jpg\",\n    \"/words.png\",\n    \"/test.png\",\n    \"/gradiente.jpg\"\n  ]);\n\n  // Set the scene background property to the resulting texture.\n  scene.background = texture;\n  return null;\n}\n\n// Geometry\nfunction Sphere(props) {\n  const { scene, gl } = useThree();\n  // The cubeRenderTarget is used to generate a texture for the reflective sphere.\n  // It must be updated on each frame in order to track camera movement and other changes.\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  });\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 0, 0);\n  scene.add(cubeCamera);\n  const mesh = useRef();\n  // Update the cubeCamera with current renderer and scene.\n  useFrame((t) => { mesh.current.rotation.x = Math.sin(t.clock.elapsedTime*100)*50\n    mesh.current.rotation.y = Math.sin(t.clock.elapsedTime*80)*50\n    //cubeCamera.position.set(Math.sin(t.clock.elapsedTime)*1,Math.sin(t.clock.elapsedTime)*5,Math.sin(t.clock.elapsedTime)*4)\n    cubeCamera.update(gl, scene)});\n\n  return (\n    <mesh visible position={[0, 1, 0]} \n      rotation={[0, 0, 0]}  \n      ref={mesh} castShadow\n      onPointerOver={props.onHover} \n      onPointerOut={props.outHover}\n    >\n      <directionalLight intensity={0.75} />\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\n      <meshBasicMaterial\n        attach=\"material\"\n        envMap={cubeCamera.renderTarget.texture}\n        color=\"white\"\n        roughness={0.1}\n        metalness={1}\n      />\n    </mesh>\n  );\n}\n\n// Lights\nfunction CustomBlender() {\n  const [hovered, setHovered]=useState(false);\n  //const gltf = useLoader(GLTFLoader, './ojo_broken_a.gltf')\n  return (\n    <Canvas>\n      <CameraControls />\n        <Environment files={['gradiente.jpg','gradiente.jpg','gradiente.jpg','test.png','test.png','test.png']} path='./' background={false} />\n      <SkyBox />\n      <Text      \n        color={'#EC2D2D'}\n        fontSize={1}\n        maxWidth={5}\n        textAlign={'left'}\n        font=\"https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff\"\n        fillOpacity={0}\n        strokeWidth={'2.5%'}\n        strokeColor=\"#000\"\n        anchorX=\"right\"\n        anchorY=\"right\">\n        Mirada Vegetal \n      </Text>\n      <directionalLight position={[10, 10, 5]} intensity={1} />\n      <pointLight position={[0, -10, 5]} intensity={1} />\n      <MyModel />\n    </Canvas>\n  );\n}\n\nexport default CustomBlender;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CustomBlender from './CustomBlender.js'\n//import App2 from \"./App2.js\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    {/*<h1>Mirada</h1>\n    <h1>Vegetal</h1>\n    <App2  />*/}\n    <Suspense fallback={null}>\n      <CustomBlender />\n    </Suspense>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}